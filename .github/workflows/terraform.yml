# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
#  push:
#    branches: [ "main" ]
#  pull_request:

permissions:
  contents: read

env:
  TF_VAR_appliance_url: "${{ vars.TFVAR_APPLIANCE_URL }}"
  TF_VAR_account: "${{ vars.TFVAR_ACCOUNT }}"
  TF_VAR_login: "${{ vars.TFVAR_LOGIN }}"
  TF_VAR_api_key: "${{ secrets.TFVAR_API_KEY }}"
  TF_VAR_ssl_cert: "${{ vars.TFVAR_SSL_CERT }}"
  TF_VAR_conjur_secret_id_1: "${{ vars.TFVAR_conjur_secret_id_1 }}"

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: 'Get JWT (ID Token)'
      uses: actions/github-script@v6
      id: script
      timeout-minutes: 1
      with:
        debug: true
        script: |
          const token = process.env['ACTIONS_RUNTIME_TOKEN']
          const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
          core.setOutput('TOKEN', token.trim())
          core.setOutput('IDTOKENURL', runtimeUrl.trim())

    - name: 'Get JWT'
      run: |
        echo ${{steps.script.outputs.TOKEN}}
        export JWT=$(curl -H "Authorization: bearer  ${{steps.script.outputs.TOKEN}}" ${{steps.script.outputs.IDTOKENURL}}  -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" -d "{}" | jq -r '.value')
        echo "JWT=$JWT" >> "$GITHUB_ENV"
        echo $JWT > /tmp/action.jwt

    - name: 'Upload JWT Artifact'
      uses: actions/upload-artifact@v3
      with:
        name: actions.jwt
        path: /tmp/action.jwt
        retention-days: 90

    - name: 'echo parameters'
      run: |
        echo "vars.CONJUR_URL: ${{ vars.CONJUR_URL }}"
        echo "vars.CONJUR_ACCOUNT: ${{ vars.CONJUR_ACCOUNT }}"
        echo "vars.CONJUR_JWT_AUTHN_ID: ${{ vars.CONJUR_JWT_AUTHN_ID }}"
        echo "vars.CONJUR_SECRET_ID_1: ${{ vars.CONJUR_SECRET_ID_1 }}"
        echo "vars.CONJUR_SECRET_ID_2: ${{ vars.CONJUR_SECRET_ID_2 }}"

    - name: 'Get Conjur Secrets'
      run: |
        echo "Authenticating with JWT to Conjur"
        echo ""
        export SESSION_TOKEN=$(curl -v -k -X POST $CONJUR_AUTHENTICATE_URL -H "Content-Type:application/x-www-form-urlencoded" -H "Accept-Encoding:base64" --data-urlencode "jwt=$JWT")
        echo ""
        export SECRET_1=$(curl -v -k -H "Authorization:Token token=\"${SESSION_TOKEN}\"" $CONJUR_RETRIEVE_URL/${{ vars.CONJUR_SECRET_ID_1 }})
        echo ""
        export SECRET_2=$(curl -v -k -H "Authorization:Token token=\"${SESSION_TOKEN}\"" $CONJUR_RETRIEVE_URL/${{ vars.CONJUR_SECRET_ID_2 }})
        echo ""
        echo "SECRET_1:$SECRET_1"
        echo "SECRET_2:$SECRET_2"
        echo "SECRET_1=$SECRET_1" >> "$GITHUB_ENV"
        echo "SECRET_2=$SECRET_2" >> "$GITHUB_ENV"

    - name: 'output env GITHUB'
      run: env | grep GITHUB || true

    - name: 'output env TFVAR'
      run: env | grep TFVAR || true

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.10.0

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

#     Checks that all Terraform configuration files adhere to a canonical format
#    - name: Terraform Format
#      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#    - name: Terraform Apply
#      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#      run: terraform apply -auto-approve -input=false

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
